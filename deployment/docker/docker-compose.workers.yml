# Docker Compose configuration for BaseAPI multiple workers
# Usage: docker-compose -f docker-compose.workers.yml up -d
# Description: Runs 3 worker instances behind nginx load balancer

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: baseapi-postgres
    environment:
      POSTGRES_DB: baseapi_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - baseapi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d baseapi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: baseapi-redis
    command: redis-server --appendonly yes --requirepass redis_password_123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - baseapi-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password_123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # BaseAPI Worker 1
  baseapi-worker1:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: baseapi-worker1
    environment:
      # Server configuration
      SERVER_PORT: 8080
      ENVIRONMENT: production
      APP_VERSION: v1.0.0
      
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: secure_password_123
      DB_NAME: baseapi_db
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password_123
      
      # Security
      JWT_SECRET: your-super-secret-jwt-key-for-production-worker1
      
      # Sentry (optional)
      SENTRY_DSN: https://your-key@o123456.ingest.sentry.io/123456789
      
      # Gin mode
      GIN_MODE: release
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - baseapi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # BaseAPI Worker 2
  baseapi-worker2:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: baseapi-worker2
    environment:
      # Server configuration
      SERVER_PORT: 8080
      ENVIRONMENT: production
      APP_VERSION: v1.0.0
      
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: secure_password_123
      DB_NAME: baseapi_db
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password_123
      
      # Security
      JWT_SECRET: your-super-secret-jwt-key-for-production-worker2
      
      # Sentry (optional)
      SENTRY_DSN: https://your-key@o123456.ingest.sentry.io/123456789
      
      # Gin mode
      GIN_MODE: release
    ports:
      - "8081:8080"  # Map host port 8081 to container port 8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - baseapi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # BaseAPI Worker 3
  baseapi-worker3:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: baseapi-worker3
    environment:
      # Server configuration
      SERVER_PORT: 8080
      ENVIRONMENT: production
      APP_VERSION: v1.0.0
      
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: secure_password_123
      DB_NAME: baseapi_db
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password_123
      
      # Security
      JWT_SECRET: your-super-secret-jwt-key-for-production-worker3
      
      # Sentry (optional)
      SENTRY_DSN: https://your-key@o123456.ingest.sentry.io/123456789
      
      # Gin mode
      GIN_MODE: release
    ports:
      - "8082:8080"  # Map host port 8082 to container port 8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - baseapi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: baseapi-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/load-balancer.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - baseapi-worker1
      - baseapi-worker2
      - baseapi-worker3
    networks:
      - baseapi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (optional) - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: baseapi-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - baseapi-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: baseapi-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - baseapi-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  baseapi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16