# GitLab CI/CD Pipeline for BaseAPI Go Application
# This pipeline builds, tests, and deploys the application to Kubernetes

stages:
  - test
  - build
  - deploy

variables:
  # Docker registry settings (configure in GitLab CI/CD variables)
  DOCKER_REGISTRY: $CI_REGISTRY
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  
  # Kubernetes settings
  KUBECONFIG: /tmp/kubeconfig
  
  # Go settings
  GO_VERSION: "1.23"
  CGO_ENABLED: "0"
  GOOS: "linux"
  GOARCH: "amd64"

# Global settings
default:
  image: golang:1.23-alpine
  before_script:
    - apk add --no-cache git ca-certificates
    - export PATH=$PATH:/usr/local/go/bin

# Test stage
test:
  stage: test
  script:
    - echo "Running tests..."
    - go mod download
    - go mod verify
    - go vet ./...
    - go test -v -race -coverprofile=coverage.out ./...
    - go tool cover -func=coverage.out
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.out
    expire_in: 1 week
  only:
    - merge_requests
    - develop
    - main

# Security scan
security_scan:
  stage: test
  image: securecodewarrior/docker-security-scan:latest
  script:
    - echo "Running security scan..."
    - gosec ./...
  allow_failure: true
  only:
    - merge_requests
    - develop
    - main

# Build Docker image
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build --pull -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .
    - docker tag $DOCKER_IMAGE_NAME:$DOCKER_TAG $DOCKER_IMAGE_NAME:latest
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
    - docker push $DOCKER_IMAGE_NAME:latest
    - echo "Docker image pushed successfully"
  after_script:
    - docker logout $CI_REGISTRY
  only:
    - develop
    - main
    - tags

# Deploy to development environment
deploy_dev:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: development
    url: https://dev-api.your-domain.com
  variables:
    NAMESPACE: baseapi-dev
    REPLICAS: "1"
    ENVIRONMENT: "development"
  before_script:
    - echo $KUBE_CONFIG_DEV | base64 -d > $KUBECONFIG
    - kubectl config use-context development
  script:
    - echo "Deploying to development environment..."
    - |
      cat <<EOF | kubectl apply -f -
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: baseapi
        namespace: $NAMESPACE
        labels:
          app: baseapi
          environment: $ENVIRONMENT
      spec:
        replicas: $REPLICAS
        selector:
          matchLabels:
            app: baseapi
        template:
          metadata:
            labels:
              app: baseapi
              environment: $ENVIRONMENT
          spec:
            containers:
            - name: baseapi
              image: $DOCKER_IMAGE_NAME:$DOCKER_TAG
              ports:
              - containerPort: 8080
              env:
              - name: ENVIRONMENT
                value: "$ENVIRONMENT"
              - name: SERVER_PORT
                value: "8080"
              - name: DB_HOST
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: db-host
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: db-password
              - name: REDIS_HOST
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: redis-host
              - name: JWT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: jwt-secret
              - name: SENTRY_DSN
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: sentry-dsn
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "250m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 5
                periodSeconds: 5
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: baseapi-service
        namespace: $NAMESPACE
      spec:
        selector:
          app: baseapi
        ports:
        - protocol: TCP
          port: 80
          targetPort: 8080
        type: ClusterIP
      EOF
    - kubectl rollout status deployment/baseapi -n $NAMESPACE
    - echo "Development deployment completed"
  only:
    - develop

# Deploy to staging environment
deploy_staging:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://staging-api.your-domain.com
  variables:
    NAMESPACE: baseapi-staging
    REPLICAS: "2"
    ENVIRONMENT: "staging"
  before_script:
    - echo $KUBE_CONFIG_STAGING | base64 -d > $KUBECONFIG
    - kubectl config use-context staging
  script:
    - echo "Deploying to staging environment..."
    - |
      cat <<EOF | kubectl apply -f -
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: baseapi
        namespace: $NAMESPACE
        labels:
          app: baseapi
          environment: $ENVIRONMENT
      spec:
        replicas: $REPLICAS
        selector:
          matchLabels:
            app: baseapi
        template:
          metadata:
            labels:
              app: baseapi
              environment: $ENVIRONMENT
          spec:
            containers:
            - name: baseapi
              image: $DOCKER_IMAGE_NAME:$DOCKER_TAG
              ports:
              - containerPort: 8080
              env:
              - name: ENVIRONMENT
                value: "$ENVIRONMENT"
              - name: SERVER_PORT
                value: "8080"
              - name: DB_HOST
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: db-host
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: db-password
              - name: REDIS_HOST
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: redis-host
              - name: JWT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: jwt-secret
              - name: SENTRY_DSN
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: sentry-dsn
              resources:
                requests:
                  memory: "512Mi"
                  cpu: "500m"
                limits:
                  memory: "1Gi"
                  cpu: "1000m"
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 5
                periodSeconds: 5
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: baseapi-service
        namespace: $NAMESPACE
      spec:
        selector:
          app: baseapi
        ports:
        - protocol: TCP
          port: 80
          targetPort: 8080
        type: ClusterIP
      EOF
    - kubectl rollout status deployment/baseapi -n $NAMESPACE
    - echo "Staging deployment completed"
  when: manual
  only:
    - main

# Deploy to production environment
deploy_production:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://api.your-domain.com
  variables:
    NAMESPACE: baseapi-prod
    REPLICAS: "3"
    ENVIRONMENT: "production"
  before_script:
    - echo $KUBE_CONFIG_PROD | base64 -d > $KUBECONFIG
    - kubectl config use-context production
  script:
    - echo "Deploying to production environment..."
    - |
      cat <<EOF | kubectl apply -f -
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: baseapi
        namespace: $NAMESPACE
        labels:
          app: baseapi
          environment: $ENVIRONMENT
      spec:
        replicas: $REPLICAS
        selector:
          matchLabels:
            app: baseapi
        template:
          metadata:
            labels:
              app: baseapi
              environment: $ENVIRONMENT
          spec:
            containers:
            - name: baseapi
              image: $DOCKER_IMAGE_NAME:$DOCKER_TAG
              ports:
              - containerPort: 8080
              env:
              - name: ENVIRONMENT
                value: "$ENVIRONMENT"
              - name: SERVER_PORT
                value: "8080"
              - name: GIN_MODE
                value: "release"
              - name: DB_HOST
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: db-host
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: db-password
              - name: REDIS_HOST
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: redis-host
              - name: JWT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: jwt-secret
              - name: SENTRY_DSN
                valueFrom:
                  secretKeyRef:
                    name: baseapi-secrets
                    key: sentry-dsn
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "1000m"
                limits:
                  memory: "2Gi"
                  cpu: "2000m"
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 5
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: baseapi-service
        namespace: $NAMESPACE
      spec:
        selector:
          app: baseapi
        ports:
        - protocol: TCP
          port: 80
          targetPort: 8080
        type: ClusterIP
      ---
      apiVersion: autoscaling/v2
      kind: HorizontalPodAutoscaler
      metadata:
        name: baseapi-hpa
        namespace: $NAMESPACE
      spec:
        scaleTargetRef:
          apiVersion: apps/v1
          kind: Deployment
          name: baseapi
        minReplicas: 3
        maxReplicas: 10
        metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 80
      EOF
    - kubectl rollout status deployment/baseapi -n $NAMESPACE
    - echo "Production deployment completed"
  when: manual
  only:
    - tags
    - main